# Packages needed for this Assignment
import numpy as np
import matplotlib.pyplot as plt
import scipy as sp
from scipy.interpolate import interp1d
from scipy.optimize import minimize_scalar

# Set Variables
gamma	= 1
psi 	= 1
chi		= 1
beta 	= 0.99
nu_vec = [0.25,0.5,0.999,2,4]
count = len(nu_vec)
T = 100

# Set empty theta vector
theta_vec = []

# Calculate Corresponding Theta Values
for i in range(count):
    theta_i = 0.5
    # theta_i = (1 - beta) / ( (1 - beta) + ( (-(1 - beta) + np.sqrt(beta**2 - 2*beta + 5))/2 )**nu[i])
    theta_vec.append(theta_i)

for i in range(count):
    nu = nu_vec[i]
    theta = theta_vec[i]

    ## Solve for steady state variables
    Cstar = (1-theta/chi * (1-theta+theta*(theta/(1-theta)**((1-nu)/nu))
                                *(1-beta)**((nu-1)/nu))**((nu-gamma)/(1-nu)))**(1/(psi+gamma))
    Mstar = ((1-beta)*((1-theta)/theta))**(-1/nu)*Cstar
    Xstar = ((1-theta)*Cstar**(1-nu)+theta*(Mstar)**(1-nu))**(1/(1-nu))

    # define sparse identity, above-diagonal sparse matrix, below-diagonal sparse matrix, and zero matrix
    I = sp.sparse.eye(T)
    Ip1 = sp.sparse.diags([np.ones(T-1)], [1], (T, T))
    Z = sp.sparse.csr_matrix((T, T))

    #### Market Clearing Block
    # Goods Market
    Phigmy = -I
    Phigmc = I
    Phigmmp = Z
    Phigmwp = Z
    Phigmq = Z
    Phigmx = Z
    Phigmx = Z

    # Money Market
    Phimmc = I
    Phimmmp = -I
    Phimmq = (-1/nu)*(beta/(1-beta))*I
    Phimmy = Z
    Phimmwp = Z
    Phimmx = Z

    dHdY = sp.sparse.bmat([[Phigmy, Phigmc, Phigmwp, Phigmq],
                           [Phimmy, Phimmc, Phimmwp, Phimmq]])

    assert dHdY.shape == (2*T, 4*T)

    #### Firms block
    # Output function
    Phiyn = I
    Phiym = Z
    Phiyp = Z

    # Zero profit condition
    Phiwpn = Z
    Phiwpm = Z
    Phiwpp = Z

    dYFdU = sp.sparse.bmat([[Phiyn, Phiyp], 
                            [Phiwpn, Phiwpp]])
    dYFdZ = sp.sparse.bmat([[Phiym],
                            [Phiwpm]])
    assert dYFdU.shape == (2*T, 2*T)
    assert dYFdZ.shape == (2*T, 1*T)

    ### Household Block
    A = ((nu-gamma)*(1-theta)*(Cstar/Xstar)**(1-nu)-nu)**(-1) # Constant
    Phicm = -(1/A)*(theta*(Mstar)**(1-nu)*(nu-gamma))*I - (1/A)*Phiwpm
    Phicn = (1/A)*psi*I - (1/A)*Phiwpn
    Phicp = (1/A)*(theta*(Mstar)**(1-nu)*(nu-gamma))*I - (1/A)*Phiwpp

    # Add the extra phi for the variable X
    Phixm = (1-theta)*(Cstar/Xstar)*Phicm
    Phixn = (1-theta)*(Cstar/Xstar)*Phicn
    Phixp = (1-theta)*(Cstar/Xstar)*Phicp


    dYHdU = sp.sparse.bmat([[Phicn, Phicp]])
    dYHdZ = sp.sparse.bmat([[Phicm]])
    assert dYHdU.shape == (1*T, 2*T)
    assert dYHdZ.shape == (1*T, 1*T)

    ### Bonds Block
    Phiqm = nu*Ip1*Phicm - (nu-gamma)*Ip1*Phixm
    Phiqn = nu * Ip1 * Phicm - (nu - gamma) * Ip1 * Phixn
    Phiqp = -Ip1 * nu *  Ip1 * Phicp - (nu - gamma) * Ip1 * Phixp 

    dYBdU = sp.sparse.bmat([[Phiqn, Phiqp]])
    dYBdZ = sp.sparse.bmat([[Phiqm]])
    assert dYBdU.shape == (1*T, 2*T)
    assert dYBdZ.shape == (1*T, 1*T)

    # stack dYHdU on top of dYFdU to get dYdU
    dYdU = sp.sparse.bmat([[dYHdU],
                        [dYFdU],
                        [dYBdU]])
        
    # stack dYHdZ on top of dYFdZ to get dYdZ
    dYdZ = sp.sparse.bmat([[dYHdZ],
                        [dYFdZ],
                        [dYBdZ]])
        
    assert dYdU.shape == (4*T, 2*T)
    assert dYdZ.shape == (4*T, 1*T)

    # compute dHdU using the chain rule dHdU = dHdY @ dYdU (@ is the python matrix multiplication operator)
    dHdU = dHdY @ dYdU 

    # compute dHdZ using the chain rule dHdZ = dHdY @ dYdZ (@ is the python matrix multiplication operator)
    dHdZ = dHdY @ dYdZ

    assert sp.sparse.issparse(dHdZ) == True
    assert sp.sparse.issparse(dHdU) == True

    assert dHdU.shape == (2*T, 2*T)
    assert dHdZ.shape == (2*T, 1*T)

    # compute the Jacobian of the model
    dUdZ = - sp.sparse.linalg.spsolve(dHdU, dHdZ)
    dYdZ = dYdU @ dUdZ + dYdZ

    dXdZ = sp.sparse.bmat([[dUdZ],
                        [dYdZ]])
        
    assert dUdZ.shape == (2*T, T)
    assert dYdZ.shape == (4*T, T)
    assert dXdZ.shape == (6*T, T)

    ## Plotting IRFs
    # plot IRFs to Money Supply shock with persistence rho
    rho_m   = 0.99
    m = np.zeros((T, 1))
    m[0] = 1
    for t in range(1, T):
            m[t] = rho_m * m[t-1]

    # compute impulse response functions
    X = dXdZ @ m

    # unpack X into its components k,n,c,y,wp,rk
    c = X[0:T]
    p = X[T:2*T]
    q = X[2*T:3*T]

    # plot impulse response functions
    fig, ax = plt.subplots(2, 2, figsize=(12, 10))
    ax[0, 0].plot(m, label='m')
    ax[0, 0].set_title('Money Supply')
    ax[0, 1].plot(c, label='c')
    ax[0, 1].set_title('Consumption')
    ax[1, 0].plot(p, label='p')
    ax[1, 0].set_title('Prices')
    ax[1, 1].plot(q, label='q')
    ax[1, 1].set_title('Nominal Interest Rate')

    plt.savefig(f'Documents/*School/PhD/FirstYear/210C/GitFolder/Homework/PS1/IRFs_{i}.png')
